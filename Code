def solve_test_case(n, arr):
    need_extra = (n % 2 == 1)
    arr.sort()
    
    if need_extra:
        min_k = float('inf')
        
        test_arr = [arr[0] - 1] + arr
        k = try_pairing(test_arr)
        min_k = min(min_k, k)
        
        test_arr = arr + [arr[-1] + 1]
        k = try_pairing(test_arr)
        min_k = min(min_k, k)
        
        for i in range(len(arr) - 1):
            mid = (arr[i] + arr[i + 1]) // 2
            if mid != arr[i] and mid != arr[i + 1]:
                test_arr = arr[:i + 1] + [mid] + arr[i + 1:]
                k = try_pairing(test_arr)
                min_k = min(min_k, k)
        
        return min_k
    else:
        return try_pairing(arr)
 
def try_pairing(arr):
    max_dist = 0
    for i in range(0, len(arr), 2):
        max_dist = max(max_dist, arr[i + 1] - arr[i])
    return max_dist
 
def main():
    t = int(input())
    for _ in range(t):
        n = int(input())
        arr = list(map(int, input().split()))
        result = solve_test_case(n, arr)
        print(result)
